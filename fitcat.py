import asyncio
import json
import os
import random
from datetime import datetime, time, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env !")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
with open("program.json", "r", encoding="utf-8") as f:
    PROGRAM = json.load(f)

# –ü—Ä–æ–≥—Ä–µ—Å—Å
PROGRESS_FILE = "progress.json"
WEIGHT_FILE = "weight.json"

def load_json(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

USER_PROGRESS = load_json(PROGRESS_FILE)
USER_WEIGHT = load_json(WEIGHT_FILE)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÜ –ú–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")],
        [KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton(text="üéØ –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å")],
        [KeyboardButton(text="üçè –ú–æ–π —Ä–∞—Ü–∏–æ–Ω")],
        [KeyboardButton(text="‚öñÔ∏è –ú–æ–π –≤–µ—Å")],
        [KeyboardButton(text="üíß –ü–∏—Ç—å –≤–æ–¥—É")],
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

goal_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=goal)] for goal in ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–°–∏–ª–∞", "–û–±—â–∞—è —Ñ–æ—Ä–º–∞"]] +
             [[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True,
)

diet_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True,
)

goals = {
    "–ü–æ—Ö—É–¥–µ–Ω–∏–µ": ["–ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–°–∫–∞–∫–∞–ª–∫–∞", "–ë–µ–≥"],
    "–°–∏–ª–∞": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≤–µ—Å–æ–º", "–û—Ç–∂–∏–º–∞–Ω–∏—è —Å —É—Ç—è–∂–µ–ª–µ–Ω–∏—è–º–∏", "–¢—è–≥–∞ –Ω–∞ —Å–ø–∏–Ω—É"],
    "–û–±—â–∞—è —Ñ–æ—Ä–º–∞": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "–û—Ç–∂–∏–º–∞–Ω–∏—è", "–ü–ª–∞–Ω–∫–∞"]
}

tips = [
    "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ä–∞—Å—Ç—è–∂–∫—É –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üßò‚Äç‚ôÇÔ∏è",
    "–ü–µ–π –≤–æ–¥—É, –∫–æ—Ç–∏–∫! üíß",
    "–°–ª—É—à–∞–π —Å–≤–æ—ë —Ç–µ–ª–æ ‚Äî –æ—Ç–¥—ã—Ö —Ç–æ–∂–µ –≤–∞–∂–µ–Ω! üí§",
    "–ù–µ –±—Ä–æ—Å–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ –ø—É—Ç–∏! üí™"
]

user_water_intake = {}
user_input_mode = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –§–∏—Ç–Ω–µ—Å –ö–æ—Ç–∏–∫, –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–°—Ç–∞—Ä—Ç")]],
            resize_keyboard=True
        )
    )

# –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ä—Ç"
@dp.message(lambda msg: msg.text == "–°—Ç–∞—Ä—Ç")
async def start_button(message: types.Message):
    await message.answer("–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ä—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_kb)

# –ú–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
@dp.message(lambda msg: msg.text == "üìÜ –ú–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def send_training(message: types.Message):
    user_id = str(message.from_user.id)
    day = USER_PROGRESS.get(user_id, 0)

    if day >= len(PROGRAM):
        await message.answer("–¢—ã –ø—Ä–æ—à—ë–ª –≤—Å—é –ø—Ä–æ–≥—Ä–∞–º–º—É! üî•")
        return

    workout = PROGRAM[day]
    motivation = random.choice(tips)

    USER_PROGRESS[user_id] = day + 1
    save_json(PROGRESS_FILE, USER_PROGRESS)

    await message.answer(f"<b>–î–µ–Ω—å {day + 1} –∏–∑ 30</b>\n\n{workout}\n\n{motivation}", reply_markup=main_kb)

# –ü—Ä–æ–≥—Ä–µ—Å—Å
@dp.message(lambda msg: msg.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: types.Message):
    user_id = str(message.from_user.id)
    day = USER_PROGRESS.get(user_id, 0)

    if day >= len(PROGRAM):
        progress_text = "–¢—ã –∑–∞–≤–µ—Ä—à–∏–ª(–∞) –≤—Å—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™"
    else:
        progress_text = f"–¢—ã –Ω–∞ <b>{day + 1}-–º –¥–Ω–µ</b> –∏–∑ 30. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üî•"

    await message.answer(progress_text, reply_markup=main_kb)

# –ü–∏—Ç—å –≤–æ–¥—É
@dp.message(lambda msg: msg.text == "üíß –ü–∏—Ç—å –≤–æ–¥—É")
async def water_intake(message: types.Message):
    user_id = str(message.from_user.id)
    user_input_mode[user_id] = "water"
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞) —Å–µ–≥–æ–¥–Ω—è? –ù–∞–ø–∏—à–∏ –≤ –ª–∏—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5).")

# –ú–æ–π –≤–µ—Å
@dp.message(lambda msg: msg.text == "‚öñÔ∏è –ú–æ–π –≤–µ—Å")
async def ask_weight(message: types.Message):
    user_id = str(message.from_user.id)
    user_input_mode[user_id] = "weight"
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 72.5):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
@dp.message(lambda msg: msg.text.replace('.', '', 1).isdigit())
async def handle_input(message: types.Message):
    user_id = str(message.from_user.id)
    mode = user_input_mode.get(user_id)

    if mode == "water":
        water_amount = float(message.text)
        user_water_intake[user_id] = user_water_intake.get(user_id, 0) + water_amount
        await message.answer(f"–¢—ã –≤—ã–ø–∏–ª(–∞) {water_amount} –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã! –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {user_water_intake[user_id]} –ª üíß")

    elif mode == "weight":
        new_weight = float(message.text)
        previous = USER_WEIGHT.get(user_id)
        diff = ""

        if previous is not None:
            change = new_weight - previous
            if change > 0:
                diff = f" (+{change:.1f} –∫–≥)"
            elif change < 0:
                diff = f" ({change:.1f} –∫–≥)"
            else:
                diff = " (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"

        USER_WEIGHT[user_id] = new_weight
        save_json(WEIGHT_FILE, USER_WEIGHT)
        await message.answer(f"–í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {new_weight} –∫–≥{diff}")

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é (–≤–æ–¥–∞ –∏–ª–∏ –≤–µ—Å).")

# –í—ã–±–æ—Ä —Ü–µ–ª–∏
@dp.message(lambda msg: msg.text == "üéØ –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å")
async def select_goal(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:", reply_markup=goal_kb)

@dp.message(lambda msg: msg.text in goals.keys())
async def goal_selected(message: types.Message):
    goal = message.text
    program = goals.get(goal, [])
    goal_text = "\n".join(program)

    await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª(–∞) —Ü–µ–ª—å: {goal}. –¢–≤–æ—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n{goal_text}", reply_markup=main_kb)

# –ú–æ–π —Ä–∞—Ü–∏–æ–Ω
@dp.message(lambda msg: msg.text == "üçè –ú–æ–π —Ä–∞—Ü–∏–æ–Ω")
async def my_diet(message: types.Message):
    await message.answer(
        "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:\n\n"
        "1. –ë–µ–ª–∫–∏: –∫—É—Ä–∏—Ü–∞, —Ä—ã–±–∞, —è–π—Ü–∞, –±–æ–±–æ–≤—ã–µ.\n"
        "2. –£–≥–ª–µ–≤–æ–¥—ã: –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, —Ä–∏—Å, –æ–≤—Å—è–Ω–∫–∞.\n"
        "3. –ñ–∏—Ä—ã: –∞–≤–æ–∫–∞–¥–æ, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ, –æ—Ä–µ—Ö–∏.\n\n"
        "–ù–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å –≤–æ–¥—É –∏ —Å–æ–±–ª—é–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤!",
        reply_markup=diet_kb
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(lambda msg: msg.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer("–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_kb)

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ
async def water_reminder():
    while True:
        now = datetime.now()
        target_time = datetime.combine(now.date(), time(hour=10))
        if now > target_time:
            target_time += timedelta(days=1)
        wait_seconds = (target_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        for user_id in user_water_intake:
            try:
                await bot.send_message(user_id, "üêæ –ù–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å –≤–æ–¥—É! üíß")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(water_reminder())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
